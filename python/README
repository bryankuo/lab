hello.py: a simple example.
hello_vscode.py: coding on vscode.
hello_chrome.py: open chrome.
hello_odf.py: poc test odfpy module.
gmap_chrome.py: google map via selenium chrome driver and stealth,
ofile.py: another example.
web.py: scraping web example.
browse_url.py: minimum open browser function for bash
requests_url.py: minimum requests function for bash
volume.sh: caller of volume*.py file.
volume.py: scrap listed average daily volume for the last year.
volume_otc.py: scrap otc average daily volume for the last year.
overview.sh: overview of a ticker.
range52week.py: get 52 week range,
range52week_cmp.sh: compare 52 week range between tickers.
t50_component.py: scrap T50 components via selenium.
margin_ratio.py: get margin ratio for a ticker.
margin_ratio_cmp.sh: compare margin ration between tickers.
fetch_margin_balance.py: fetch margin balance by ticker at a time,
scrap_margin_balance.sh: scraping,
get_ticker_margin_balance.py:
capital.py: get capital of a ticker.
capital_cmp.sh: compare capital of tickers.
beta.py: get beta, PE of a ticker.
beta_cmp.sh: compare beta of tickers.
cb.py: find if CB is issued for a ticker by webbrowser.
quote.py: get OHLC data frame.
instant_quote.sh: get OHLC data frame periodically.
board.py: get board holdings.
basic.py: check if CB issued by scraping POST reply.
get_mrkt_value.py: scrap ticker market values.
scrap_market_value.sh: scrap each ticker market value from ror.sh download.
uno_load_market_value.py: load into calc.
transaction.py: parsing type 2 daily transaction by ticker symbol from bsr.
transotc.py: parsing type 4 transactions from tpex.
transaction.sh: streamline type 2 to calc.
workbench.py: keep current workbench.
branch.py: browsing broker transaction summary by ticker and date,
branch1.py: scrap single broker transactions,
launch.py: launch libreoffice.
briefing.sh: redirect overview.sh output to datafiles.
money_flow.sh: trigger get_weighted_index.py
get_weighted_index.py: parse sector performance from pchome stock.
msci_components.py: scrap MSCI TAIEX components from histock.
rank.sh: gather market value, t50, and msci rank together.
merge.py: mix 3 output files then open libreoffice.
gpm.py: scrap GPM/OPM from pages,
gpm_cmp.sh: compare ticker Gross Profit Margin with competiors.
get_listed.py: get listed tickers from TAIEX to file,
get_listed.sh: get 3 types of listed tickers,
update_watchlist.sh: add new symbol to watchlist,
annual_report.py: browse latest annual report.
simple_plot.py: simple matplotlib example.
correlation.py: poc test correlating 2 or more US tickers
xyplot.py: xyplot example
plot_n_amplitude.py: plot number of tick in terms of amplitude
activity.py: counting chips in recent 5 days,
looping.py: looping listed companies.
activities.sh: looping company activity by type.
announcement.py: launch TSEC announcement,
datafiles/clusters: a cluster of tickers for further comparison,
datafiles/[ticker].txt: output of overview.sh,
datafiles/listed_2.txt: TAIEX tickers.
datafiles/listed_4.txt: TPEX tickers.
datafiles/listed_5.txt: TPEX otc tickers.
pe.py: get PER of a ticker.
range52w.py: get quote, name, 52w range, and percent% of a ticker.
status.sh: generate activity, per, range52w by listed type.
uno.py: libreoffice integration.
web_search.py: launch all web page search.
borrowing_daily.py: open pages.
a905_component.py: get all A905 index components.
gretai50.txt: scrap gretai50 components.
price_tags.py: show price tags on daily base.
taxid.py: find tax id by ticker and title.
top150.py: get top 150 market value.
get_market_capital.py: scrape market capital.
m100_components.py: scrap m100 component list and weight.
uno_load_m100_components.py: load component list into calc.
uno_kicks.py: update libreoffice calc, as well as testbed.
uno_kicks.sh: scripting update quote.
uno_status.sh: update quote, activity, per of a ticker to calc.
uno_status_loop.sh: for each item in list, run uno_status.sh.
uno_quotes.sh: batch updating quote.
uno_eps.sh: looping eps.
uno_activity.sh: looping activity.
gmap.py: trigger jsfiddle show plots.
gtrend.py:
geopy.py: add point to google map.
br.py: fetch major transactions by (broker, date)
br_ticker.py: trial tetch transactions from bsr.
br.sh:
hbs30: histock institutional buy and sell for the last 30 days.
derivative.py: check if has derivatives.
uno_per.py: update per by group.
uno_stalk.sh: looping update by group.
check.sh: append ticker if in listed company but not in watchlist.
check_bountylist.sh: loop bounty list and append ticker if in listed company but not in watchlist.
uno_stalk_story.sh: looping add story.
uno_story.py: append ticker story.
chips.py: tracking major, internal, management transfer
get_twse_mark.py: get mark and volume.
get_twse_ror.py: get ror history.
fetch_ticker_ror.py: fetch ticker ror for further process.
get_ticker_ror.py: scrap ticker ror and out rs.
rs_wrt_twse.py: generate rs with respect to twse mark.
get_file_ror.sh: loop specific file in directory and scraping ror,
fetch_limit_updown.py: fetch limit up or limit down by date.
get_limit_updown.py: extract limit up or down table by date.
uno_launch: launch calc ods or csv via uno.
uno_formula.py: adding formula to ods.
uno_rs: launch rs calc ods adding percentilerank formula.
price.py: extract type 2 ticker close price by date and return in list.
price_otc.py: extract type 4 ticker close price by date and return in list.
price.sh: extract twse ticker close price by date and return in list.
price_type5.py: fetch type 5 ticker close price and return in list.
price_type5_csv.py: download and parsing csv example.
insider_trade.py: fetch latest insider trade report.
fetch_ocf.py: fetch operation cash flow.
fetch_cashflow_statement.py: fetch mops cash flow statement.
fetch_fcf.py: fetch free cash flow.
gbank_histock.py: getting gbank volume by date, ticker some sort of.
ticker_ror.sh: figure out ror since X weeks ago.
is_twse_open.py: to tell market is open, otherwise return last trade day.
last_trade_day.py: get the last trade day of a specific date
sma5.py: get sma5 from chart data.
fetch_etf_components.py: fetch by id.
wg878.py: poc test chrome driver.
wg_components.py: get html.
scrap_wg_components.py: from file.
fetch_volume_ratio.py: scrap volume ratio of last trade day.
after_market.py: scrap all volume by date.
after_market.sh: wrapper of after_market.py,
revenue.py: scrap monthly revenue growth.
scrap_monthly_revenue.sh: scripting scrap actions
get_ticker_monthly_revenue.py: pick
fetch_ticker_monthly_revenue.py: fetch
create_ticker_list: create a list from watchlist file,
httpbin.py: playground of httpbin,
useragents.py: user agents global variables,
uno_bquote.py: batch update quote,
uno_bquote.sh: wrapper
compare_volume.py: generate ratio by ticker,
compare_volume.sh: a wrapper,
uno_vratio.py: update vr to calc via UNO,
sites.py:
test.py: test how to run macro inside LO calc, in dispatch function
menu.py: test adding standard filter LO uno calc
uno_addsheets.py: exercise dispatch function
volume_diff.sh: against last time, intraday
volume_ratio.sh: compare against last trade day
uno_update2b.py: update 2b into calc instead of open manually,
us_ticker.py:
gini_tkrbranch.sh: wrapper
fetch_tkrbranch.py: scrap branch and figure gini
ticker_branch.py: hs version
count_ndays_last_high.sh: trial on counting number of days to reach high
loop_last_high.sh: loop counting last high, run once
ndays_2new_high.sh: counting by ticker
ndays_last_hl.py: find peaks,
peak_valley.py:
peak_valley.sh: streamline,
10d_low.sh: N days low and vol > 10k lots
uno_updateqslu.py:
fetch_board_holding.py: fetch bhr from the net
get_bhr.py: extract
bholding.sh: wrapper
read_am.py: read csv from after_market.py 1
rw_am.py: read from csv, convert type, write to csv
rw_qvrs.py:
fetch_ix0118.py: fetch ix0118 components and weight
wrangle_df.py: exercise pandas dataframe merge functions
./datafiles/bkr.ods: calc broker list note, not complete
./datafiles/taiex/ovt_bkr.txt: overnight trade broker candidates
./datafiles/taiex/broker_list.ods:
./datafiles/taiex/sii.ods: all ticker basic info
./uno/unload: re-organizing
./uno/unload/slice_last_high.py: count n days since last high
./uno/load: re-organizing
./uno/load/addsheet: adding a sheet, trigger macro, adding filter, move to cell
./uno/load/gretai50_components.py: loading into calc
./uno/load/etf_components.py: load eid into column X in calc
