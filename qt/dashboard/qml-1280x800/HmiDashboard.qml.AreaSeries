/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.2
import QtQuick.Window 2.1
import QtQuick.Extras 1.4
import QtQuick.Controls 1.4
// mark to prevent importing SwitchDelegate such that delaybutton 'round'
// import QtQuick.Controls 2.5

// Access C++ function from QML
// https://goo.gl/nxZegu
//import com.myself 1.0
import QtCharts 2.3

ApplicationWindow {
    id: hmiroot
    objectName: "hmiroot"
    visible: true
    // ( https://goo.gl/nnR4j9 )
    x: (Screen.width - width) / 2
    y: (Screen.height - height) / 2
    //x: 0
    //y: 0
    width: 1280
    height: 800
    // frameless windows with qt5 (qml)
    // ( https://goo.gl/nnR4j9 )
    flags: Qt.FramelessWindowHint

// How to make QtQuick2.0 application window not resizable?
// ( https://goo.gl/1YCbCc )
    maximumHeight: height
    maximumWidth: width

    minimumHeight: height
    minimumWidth: width

    color: "#161616"
    //property alias mouseArea: mouseArea
    property alias imageBattery: imageBattery
    property alias imageCharging: imageCharging
    property alias imageDiagnostics: imageDiagnostics
    property alias imageEngineering: imageEngineering

    //property alias gauge1: gauge
    //property alias txtKph1: txtKph
    property alias txtMilage1: txtMilage
    //property alias switchDelegate1: switchDelegate
    //property bool isAnimating : switchDelegate1.checked
    // Launch a child QML window from a parent QML window
    // ( https://goo.gl/J67Pcc )
    property variant win;  // you can hold this as a reference..
    // Defining Property Attributes ( https://goo.gl/p2Rg16 )
    property string current_trip : "0000000"; // string
    property string current_total : "0000000";

    //title: qsTr("RACEV HMI")

    //onActiveFocusItemChanged: print("activeFocusItem", activeFocusItem)
    // Connecting to QML Signals ( https://goo.gl/gFZphL )
    signal qmlSignal(string msg)
    signal qmlSignalActive(string msg)

    ValueSource {
        id: valueSource
        //objectName: "valueSource1" // ( https://goo.gl/Caomvq )
    }

    Rectangle {
        id: rectangle
        //color: "lightGrey"
        anchors.top: parent.top
        anchors.topMargin: 0
        anchors.bottom: parent.bottom
        anchors.bottomMargin: 800
        anchors.left: parent.left
        anchors.leftMargin: 0
        anchors.right: parent.right
        anchors.rightMargin: 1280
    }

    Item {
        id: container
        height: Math.min(hmiroot.width, hmiroot.height)
        visible: true
        z: 2
        anchors.verticalCenterOffset: -2
        anchors.horizontalCenterOffset: 0
        anchors.centerIn: parent
        width: hmiroot.width

        Row {
            id: engineeringRow_0
        objectName: "engineeringRow_0"
            x: 152
            width: 1280
            height: 50
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.bottom: parent.bottom
            anchors.bottomMargin: 5
            Rectangle {
                id: recMessage
                x: 0
                y: 0
                width: 1280
                height: 50
                color: "#1f1f1f"
                anchors.bottom: parent.bottom

                MouseArea {
            onClicked: {
                console.debug("+++");
                var component = Qt.createComponent("BatteryStatus.qml");
                win = component.createObject(deployment_window);
                //TODO: check singleton
                win.show();
                console.debug("---");
            }
                }

                Text {
                    id: lblDbop
                    width: 70
                    height: 25
                    color: "#ffffff"
                    text: qsTr("#DBW:")
                    visible: false
                    anchors.top: parent.top
                    anchors.topMargin: 0
                    textFormat: Text.PlainText
                    fontSizeMode: Text.FixedSize
                    anchors.left: parent.left
                    anchors.leftMargin: 0
                    font.pixelSize: 20
                }

                Text {
                    id: dbop
                    width: 80
                    height: 25
                    color: "#ffffff"
                    text: qsTr("00000")
                    visible: false
                    anchors.top: parent.top
                    anchors.topMargin: 0
                    anchors.left: lblDbop.right
                    anchors.leftMargin: 0
                    textFormat: Text.PlainText
                    fontSizeMode: Text.Fit
                    font.pixelSize: 20
                }

                Text {
                    id: lbl_cpu1
                    x: 200
                    width: 70
                    height: 25
                    color: "#ffffff"
                    text: qsTr("CPU%:")
                    visible: false
                    anchors.top: parent.top
                    anchors.topMargin: 0
                    textFormat: Text.PlainText
                    fontSizeMode: Text.FixedSize
                    anchors.left: dbop.right
                    anchors.leftMargin: 0
                    font.pixelSize: 20
                }

                Text {
                    id: cpu1
                    x: 390
                    width: 40
                    height: 25
                    color: "#ffffff"
                    text: qsTr("00")
                    visible: false
                    anchors.top: parent.top
                    anchors.topMargin: 0
                    anchors.left: lbl_cpu1.right
                    anchors.leftMargin: 0
                    textFormat: Text.PlainText
                    fontSizeMode: Text.Fit
                    font.pixelSize: 20
                }

                Text {
                    id: lbl_fmem
                    x: 200
                    width: 60
                    height: 25
                    color: "#ffffff"
                    text: qsTr("FREE:")
                    visible: false
                    anchors.top: parent.top
                    anchors.topMargin: 0
                    textFormat: Text.PlainText
                    fontSizeMode: Text.FixedSize
                    anchors.left: cpu1.right
                    anchors.leftMargin: 0
                    font.pixelSize: 20
                }

                Text {
                    id: fmem1
                    x: 200
                    width: 50
                    height: 25
                    color: "#ffffff"
                    text: qsTr("0000")
                    visible: false
                    anchors.top: parent.top
                    anchors.topMargin: 0
                    textFormat: Text.PlainText
                    fontSizeMode: Text.FixedSize
                    anchors.left: lbl_fmem.right
                    anchors.leftMargin: 0
                    font.pixelSize: 20
                }

                Text {
                    id: fmem2
                    x: 200
                    width: 25
                    height: 25
                    color: "#ffffff"
                    text: qsTr("M")
                    visible: false
                    anchors.top: parent.top
                    anchors.topMargin: 0
                    textFormat: Text.PlainText
                    fontSizeMode: Text.FixedSize
                    anchors.left: fmem1.right
                    anchors.leftMargin: 0
                    font.pixelSize: 20
                }

                Text {
                    id: txtVersionLabel
                    x: 192
                    width: 50
                    height: 25
                    color: "#ffffff"
                    text: qsTr("VER:")
                    anchors.top: parent.top
                    anchors.topMargin: 25
                    textFormat: Text.PlainText
                    fontSizeMode: Text.FixedSize
                    anchors.leftMargin: 0
                    font.pixelSize: 20
                    anchors.left: parent.left
                }

                Text {
                    id: txtVersion
                    objectName: "txtVersion"
                    x: 192
                    width: 200
                    height: 25
                    color: "#ffffff"
                    text: qsTr("YYYYMMDDHHNNSS")
                    anchors.top: parent.top
                    anchors.topMargin: 25
                    font.family: "Cantarell"
                    textFormat: Text.RichText
                    fontSizeMode: Text.FixedSize
                    anchors.leftMargin: 0
                    font.pixelSize: 20
                    anchors.left: txtVersionLabel.right
                }

                Text {
                    id: txtFPayLoadCaption
                    x: 183
                    y: -9
                    width: 35
                    height: 25
                    color: "#ffffff"
                    text: qsTr("#B:")
                    visible: false
                    textFormat: Text.PlainText
                    anchors.top: parent.top
                    anchors.leftMargin: 0
                    anchors.left: fmem2.right
                    anchors.topMargin: 0
                    font.pixelSize: 20
                    fontSizeMode: Text.FixedSize
                }

                Text {
                    id: txtFramePayLoad
                    objectName: "txtFramePayLoad"
                    y: -9
                    width: 40
                    height: 25
                    color: "#ffffff"
                    text: qsTr("000")
                    visible: false
                    textFormat: Text.RichText
                    anchors.top: parent.top
                    anchors.leftMargin: 0
                    anchors.left: txtFPayLoadCaption.right

                    anchors.topMargin: 0
                    font.pixelSize: 20
                    fontSizeMode: Text.FixedSize
                    font.family: "Cantarell"
                }

                Text {
                    id: txtSizeQCap
                    x: 175
                    y: -17
                    width: 40
                    height: 25
                    color: "#ffffff"
                    text: qsTr("#Q:")
                    visible: false
                    textFormat: Text.PlainText
                    anchors.top: parent.top
                    anchors.leftMargin: 0
                    anchors.left: txtFramePayLoad.right
                    anchors.topMargin: 0
                    font.pixelSize: 20
                    fontSizeMode: Text.FixedSize
                }

                Text {
                    id: txtSizeQ
                    objectName: "txtSizeQ"
                    x: -8
                    y: -17
                    width: 40
                    height: 25
                    color: "#ffffff"
                    text: qsTr("000")
                    visible: false
                    textFormat: Text.RichText
                    anchors.top: parent.top
                    anchors.leftMargin: 0
                    anchors.left: txtSizeQCap.right
                    anchors.topMargin: 0

                    font.pixelSize: 20
                    fontSizeMode: Text.FixedSize
                    font.family: "Cantarell"
                }
    /*
                SwitchDelegate {
                    id: switchDelegate
                    x: 1204
                    height: 50
                    text: checked ? qsTr("Animation ON"):qsTr("Animation OFF")
                    enabled: true
                    hoverEnabled: false
                    highlighted: false
                    spacing: 10
                    anchors.rightMargin: 0
                    anchors.right: parent.right
                    anchors.top: row2.bottom
                    checked: false
                    anchors.topMargin: 0
                    onCheckableChanged: {
                        console.debug(switchDelegate1.checked);
                        setAnimaiton(checked);
                    }
                }
    */
            }

        }

        Row {
            id: row
            x: 40
            width: 100
            height: 100
            anchors.right: parent.right
            anchors.rightMargin: 0
            anchors.top: rowTop.bottom
            anchors.topMargin: 0

            Image {
                id: imageCharging
                width: 100
                height: 100
                anchors.topMargin: 0
                fillMode: Image.PreserveAspectFit
                anchors.top: parent.top
                source: "../images/0-color/HMI-ICON-53.png"
                anchors.right: parent.right
                anchors.rightMargin: 0
        MouseArea {
            id: mouseAreaCharging
            z: 2
            anchors.fill: parent
            onClicked: {
            hmiroot.qmlSignal("ChargingStation");
            }
        }
            }
        }

        Row {
            id: rowTop
            width: 1180
            height: 100
            anchors.left: parent.left
            anchors.leftMargin: 0
            anchors.top: parent.top
            anchors.topMargin: 0

            Image {
                id: imageEcas
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 0
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-13.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageEcasKneeling
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 100
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-11.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageRearDefogger
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 200
                anchors.top: parent.top
                source: "../images/1-white/HMI-ICON-06.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageRearFogLight
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 300
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-05.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageHeadLights
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 400
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-03.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageSideLights
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 500
                anchors.top: parent.top
                source: "../images/1-white/HMI-ICON-04.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imagePSteering
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 595
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-15.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageLining
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 700
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-10.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageRegenBrake
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 800
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-08.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageAbs
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 900
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-14.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageParking
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 1000
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-09.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageHazardLight
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 1100
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-07.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }
        }

        Row {
            id: row2
            x: 42
            width: 100
            height: 100
            anchors.rightMargin: 0
            anchors.top: row.bottom
            anchors.topMargin: 0
            anchors.right: parent.right

            Image {
                id: imageDiagnostics
                width: 100
                height: 100
                anchors.topMargin: 0
                fillMode: Image.PreserveAspectFit
                anchors.top: parent.top
                source: "../images/0-color/HMI-ICON-59.png"
                anchors.right: parent.right
                anchors.rightMargin: 0
        MouseArea {
            id: mouseAreaDiagnose
            z: 2
            anchors.fill: parent
            onClicked: {
            hmiroot.qmlSignal("Diagnosis");
            }
        }
            }
        }

        Row {
            id: rowAir
            width: 300
            height: 43
            anchors.left: parent.left
            anchors.leftMargin: 0
            Image {
                id: imageAir
                width: 100
                height: 100
                anchors.verticalCenter: parent.verticalCenter
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 0
                source: "../images/0-color/HMI-ICON-34.png"
                anchors.left: parent.left
            }

            Text {
                id: txtAirCaption
                x: 0
                y: 0
                width: 70
                height: 43
                color: "#ffffff"
                text: qsTr("㎏/㎠ ")
                anchors.right: parent.right
                anchors.rightMargin: 20
                horizontalAlignment: Text.AlignHCenter
                MouseArea {
                    width: 70
                    height: 40
                    anchors.top: parent.top
                    anchors.left: parent.left
                    hoverEnabled: false
                }
                anchors.verticalCenter: parent.verticalCenter
                font.pixelSize: 25
                verticalAlignment: Text.AlignVCenter
            }


            Rectangle {
                id: recAirReading
                y: 379
                width: 100
                height: 43
                color: "#000000"
                radius: 10
                anchors.verticalCenter: parent.verticalCenter
                anchors.left: parent.left
                anchors.leftMargin: 100
            }
            anchors.top: rowTop.bottom
            anchors.topMargin: 200
            Text {
                id: txtAirReading
                y: 0
                width: 70
                height: 43
                color: "#ffffff"
                text: qsTr("0.0")
                anchors.verticalCenter: parent.verticalCenter
                anchors.horizontalCenter: parent.horizontalCenter
                horizontalAlignment: Text.AlignHCenter
                font.pixelSize: 25
                verticalAlignment: Text.AlignVCenter
            }
        }

        Row {
            id: rowMotorTemp
            x: -8
            width: 300
            height: 43
            Image {
                id: imageMotorTemp
                width: 100
                height: 100
                anchors.verticalCenter: parent.verticalCenter
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 0
                source: "../images/1-white/HMI-ICON-32.png"
                anchors.left: parent.left
            }

            Text {
                id: txtKph5
                x: 0
                y: 0
                width: 70
                height: 43
                color: "#ffffff"
                text: qsTr("℃")
                horizontalAlignment: Text.AlignHCenter
                MouseArea {
                    width: 70
                    height: 40
                    anchors.top: parent.top
                    anchors.left: parent.left
                    hoverEnabled: false
                }
                anchors.verticalCenter: parent.verticalCenter
                anchors.rightMargin: 20
                verticalAlignment: Text.AlignVCenter
                font.pixelSize: 25
                anchors.right: parent.right
            }
            Rectangle {
                id: recMotorTemp
                y: 379
                width: 100
                height: 43
                color: "#000000"
                radius: 10
                z: -1
                anchors.verticalCenter: parent.verticalCenter
                anchors.left: parent.left
                anchors.leftMargin: 100

        Text {
            id: txtMotorIoTempReading
            y: 0
            width: 70
            height: 43
            color: "#ffffff"
            text: qsTr("0")
            verticalAlignment: Text.AlignVCenter
            textFormat: Text.RichText
            anchors.horizontalCenter: parent.horizontalCenter
            horizontalAlignment: Text.AlignHCenter
            anchors.verticalCenter: parent.verticalCenter
            z: 4
            lineHeight: 1.1
            font.pixelSize: 25
            styleColor: "#000000"
            wrapMode: Text.WrapAtWordBoundaryOrAnywhere
        }
        }
            anchors.leftMargin: 0
            anchors.top: rowAir.bottom
            anchors.left: parent.left
            anchors.topMargin: 10
        }

        Row {
            id: rowIoTankTemp
            x: -6
            width: 300
            height: 43
            anchors.top: rowMotorTemp.bottom
            anchors.topMargin: 10
            Image {
                id: imageIoTankTemp
                width: 100
                height: 100
                anchors.verticalCenter: parent.verticalCenter
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 0
                source: "../images/1-white/白HMI-ICON-30.png"
                anchors.left: parent.left
            }

            Text {
                id: txtKph7
                x: 0
                y: 0
                width: 70
                height: 43
                color: "#ffffff"
                text: qsTr("℃")
                horizontalAlignment: Text.AlignHCenter
                MouseArea {
                    width: 70
                    height: 40
                    anchors.top: parent.top
                    anchors.left: parent.left
                    hoverEnabled: false
                }
                anchors.verticalCenter: parent.verticalCenter
                anchors.rightMargin: 20
                font.pixelSize: 25
                verticalAlignment: Text.AlignVCenter
                anchors.right: parent.right
            }

            Rectangle {
                id: rectangle2
                y: 379
                width: 100
                height: 43
                color: "#000000"
                radius: 10
                anchors.verticalCenter: parent.verticalCenter
                anchors.left: parent.left
                anchors.leftMargin: 100
                Text {
                    id: txtOTankTemp
                    y: 0
                    width: 70
                    height: 43
                    color: "#ffffff"
                    text: qsTr("0")
                    anchors.verticalCenter: parent.verticalCenter
                    anchors.horizontalCenter: parent.horizontalCenter
                    MouseArea {
                        width: 70
                        height: 40
                        anchors.left: parent.left
                        hoverEnabled: false
                        anchors.top: parent.top
                    }
                    horizontalAlignment: Text.AlignHCenter
                    font.pixelSize: 25
                    verticalAlignment: Text.AlignVCenter
                }
            }
            anchors.leftMargin: 0
            anchors.left: parent.left
        }

        Row {
            id: rowHcWarning
            x: -1
            width: 400
            height: 100

            Image {
                id: imageBatteryStatus
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 100
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-25.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageMotor
                width: 100
                height: 100
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 200
                anchors.top: parent.top
                source: "../images/1-white/白HMI-ICON-20.png"
                anchors.left: parent.left
                anchors.topMargin: 0
            }

            Image {
                id: imageMainPower
                y: 7
                width: 100
                height: 100
                anchors.left: parent.left
                anchors.leftMargin: 0
                fillMode: Image.PreserveAspectFit
                source: "../images/1-white/白HMI-ICON-16.png"
                anchors.top: parent.top
                anchors.topMargin: 0
            }

            Image {
                id: imageTyre
                width: 100
                height: 100
                anchors.topMargin: 0
                anchors.top: rowTop.bottom
                anchors.left: imageMotor.right
                source: "../images/1-white/HMI-ICON-49.png"
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 0
            }
            anchors.leftMargin: 0
            anchors.top: rowLcWarning.bottom
            anchors.left: parent.left
            anchors.topMargin: 0
        }

        Row {
            id: rowLcWarning
            x: -10
            width: 300
            height: 43
            anchors.top: rowIoTankTemp.bottom
            anchors.topMargin: 10
            Image {
                id: imageV24
                width: 100
                height: 100
                anchors.verticalCenter: parent.verticalCenter
                fillMode: Image.PreserveAspectFit
                anchors.leftMargin: 0
                source: "../images/1-white/白HMI-ICON-17.png"
                anchors.left: parent.left
            }

            Text {
                id: txtKph9
                x: 0
                y: 0
                width: 70
                height: 43
                color: "#ffffff"
                text: qsTr("Volt")
                horizontalAlignment: Text.AlignHCenter
                MouseArea {
                    width: 70
                    height: 40
                    anchors.top: parent.top
                    anchors.left: parent.left
                    hoverEnabled: false
                }
                anchors.verticalCenter: parent.verticalCenter
                anchors.rightMargin: 20
                font.pixelSize: 25
                verticalAlignment: Text.AlignVCenter
                anchors.right: parent.right
            }

            Rectangle {
                id: rectangle3
                y: 439
                width: 100
                height: 43
                color: "#000000"
                radius: 10
                anchors.left: parent.left
                anchors.leftMargin: 100
                anchors.verticalCenter: parent.verticalCenter
                Text {
                    id: txtV24
                    y: 0
                    width: 70
                    height: 43
                    color: "#ffffff"
                    text: qsTr("0.0")
                    anchors.verticalCenterOffset: 0
                    verticalAlignment: Text.AlignVCenter
                    MouseArea {
                        width: 70
                        height: 40
                        anchors.left: parent.left
                        hoverEnabled: false
                        anchors.top: parent.top
                    }
                    anchors.verticalCenter: parent.verticalCenter
                    horizontalAlignment: Text.AlignHCenter
                    anchors.horizontalCenter: parent.horizontalCenter
                    font.pixelSize: 25
                }
            }
            anchors.leftMargin: 0
            anchors.left: parent.left
        }

        Row {
            id: rowDateTime
            x: 2
            width: 350
            height: 43
            anchors.top: imageEvacuation.bottom
            anchors.leftMargin: 35
            anchors.left: parent.left
            anchors.topMargin: 0

            Text {
                id: txtClock
                x: 0
                y: 0
                width: 350
                color: "#ffffff"
                text: qsTr("2019/01/31 00:00:00")
                horizontalAlignment: Text.AlignHCenter
                anchors.verticalCenter: parent.verticalCenter
                font.pixelSize: 35
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.bottomMargin: 30
        function set() {
        // How to format a Date in MM/dd/yyyy HH:mm:ss
        // format in JavaScript? ( https://goo.gl/nq1b73 )
Number.prototype.padLeft = function(base,chr){
    var  len = (String(base || 10).length - String(this).length)+1;
    return len > 0? new Array(len).join(chr || '0')+this : this;
}
            var d = new Date,
            dformat = [
                d.getFullYear(),
                (d.getMonth()+1).padLeft(),
                d.getDate().padLeft(),
            ].join('/') +' ' + [
            d.getHours().padLeft(),
            d.getMinutes().padLeft(),
            d.getSeconds().padLeft()].join(':');
            //=> dformat => '2012/05/17 10:52:21'
            txtClock.text = dformat;
        }
        // QML Example Use timer to update Date
        // ( https://goo.gl/REe3HA )
                Timer {
                    id: clockTimer
                    repeat: true
                    interval: 1 * 1000
                    triggeredOnStart: true
                    running: true
            onTriggered: txtClock.set()
                }

                MouseArea {
                    hoverEnabled: false
                    anchors.left: parent.left
                    anchors.right: parent.right
                    anchors.verticalCenter: parent.verticalCenter
                }
            }
        }

        Rectangle {
            id: milage
            x: 6500
            width: 180
            height: 30
            color: "#000000"
            radius: 10
            anchors.top: speedometer.bottom
            anchors.topMargin: 30
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.leftMargin: 3
            border.width: 1
            border.color: "#000000"
            Text {
                id: txtMilage
                x: 0
                width: 180
                height: 30
                color: "#ffffff"
                text: "000000.0"
                anchors.top: parent.top
                anchors.topMargin: 0
                font.pointSize: 20
                verticalAlignment: Text.AlignVCenter
                horizontalAlignment: Text.AlignHCenter
            }
        }

        Row {
            id: row10
            x: 49
            width: 100
            height: 100
            anchors.top: row2.bottom
            anchors.rightMargin: 0
            anchors.right: parent.right
            anchors.topMargin: 0

            Image {
                id: imageEngineering
                x: 0
                width: 100
                height: 100
                anchors.topMargin: 0
                fillMode: Image.PreserveAspectFit
                anchors.top: parent.top
                source: "../images/0-color/HMI-ICON-57.png"
                anchors.right: parent.right
                anchors.rightMargin: 0
        MouseArea {
            id: mouseAreaEngineering
            z: 2
            anchors.fill: parent
            onClicked: {
            hmiroot.qmlSignal("Engineering");
            }
        }
            }
        }

        Image {
            id: imageAccessLight
            width: 100
            height: 100
            anchors.right: parent.right
            anchors.rightMargin: 280
            anchors.top: rowTop.bottom
            anchors.topMargin: 0
            fillMode: Image.PreserveAspectFit
            source: "../images/1-white/白HMI-ICON-19.png"
        }

        Image {
            id: imageAlarmGetOff
            y: 100
            width: 100
            height: 100
            anchors.right: parent.right
            anchors.rightMargin: 180
            fillMode: Image.PreserveAspectFit
            source: "../images/1-white/白HMI-ICON-29.png"
            anchors.top: rowTop.bottom
            anchors.topMargin: 0
        }

        CircularGauge {
            id: powerGauge
            x: 0
            width: 200
            height: 200
            visible: false
            anchors.top: parent.top
            anchors.topMargin: 200
            stepSize: 1
            value: 0
            minimumValue: -500
            maximumValue: 1000
            smooth: true
        Behavior on value {
        NumberAnimation {
            duration: 500
        }
        }
            anchors.right: parent.right
            anchors.rightMargin: 130
            style: IconGaugeStyle {
                id: tempGaugeStyle
                maxWarningColor: Qt.rgba(0.5, 0, 0, 1)
                //icon: "qrc:/images/power.png"
                tickmarkLabel: Text {
                    color: "#ffffff"
                    text: styleData.value/1
                    font.pixelSize: tempGaugeStyle.toPixels(0.08)
                }
            }
        }

    Rectangle {
	id: recEnergyConsumption
	x: 0
	y: 0
	z: 1
	width: 520
	height: 400
	color: "#161616"
	radius: 3
	anchors.right: parent.right
	anchors.rightMargin: 110
	anchors.top: parent.top
	anchors.topMargin: 200
	border.width: 1
	border.color: "white"

	ChartView {
	    id: energy
	    title: "Energy Consumption"
	    titleColor: "white"
	    titleFont.pointSize: 10
	    backgroundColor: "#161616"
	    x: 0
	    //y: -8
	    width: 520
	    height: 400
	    antialiasing: true
	    legend.visible: false
	    // Define x-axis to be used with the series instead of default one
	    ValueAxis {
		id: valueAxis
		min: 0
		max: 9
		tickCount: 10
		labelFormat: "%.0f"
		labelsFont.pointSize: 10
	    }
	    ValueAxis {
		id: valueAxisKw
		min: -500
		max: 1000
		tickCount: 5
		labelFormat: "%.0f"
		labelsFont.pointSize: 10
		gridVisible: true
	    }
	    LineSeries {
		//name: "Russian"
		id: areaSeries1
		color: "aqua"
		axisX: valueAxis
		axisY: valueAxisKw
		//pointLabelsVisible: false
		upperSeries: LineSeries {
		    XYPoint { x: 0; y: -500 }
		    XYPoint { x: 1; y: -200 }
		    XYPoint { x: 2; y: 300 }
		    XYPoint { x: 3; y: 200 }
		    XYPoint { x: 4; y: -150}
		    XYPoint { x: 5; y: 0 }
		    XYPoint { x: 6; y: -100 }
		    XYPoint { x: 7; y: 1000 }
		}
		// SVG Color Reference ( http://tinyw.in/l2Eg )
		lowerSeries: LineSeries {
		    XYPoint { x: 0; y: -600 }
		    XYPoint { x: 1; y: -300 }
		    XYPoint { x: 2; y: 200 }
		    XYPoint { x: 3; y: 100 }
		    XYPoint { x: 4; y: -250}
		    XYPoint { x: 5; y: -100 }
		    XYPoint { x: 6; y: -200 }
		    XYPoint { x: 7; y: 800 }
		}
	    }
	}

	// QT Charts QML scrolling X axis in ms
	// ( https://to.ly/1zfgj )
	Timer {
	    property int amountOfData: 0
	    //So we know when we need to start scrolling
	    id: refreshTimer
	    interval: 1000*1
	    running: true
	    repeat: true
	    onTriggered: {
		areaSeries1.upperSeries.append(amountOfData, 500/*Dashboard.gpsSpeed*/);
		//series2.append(10, Dashboard.gpsAltitude);
		if(amountOfData > areaSeries1.axisX.max){
		    areaSeries1.axisX.min++;
		    areaSeries1.axisX.max++;
		    areaSeries1.upperSeries
			.remove(areaSeries1.axisX.mini-1);
		}
		else{
		    amountOfData++;
    //This else is just to stop incrementing the variable unnecessarily
		}
	    }
	}
    }

        CircularGauge {
            id: socGauge
            x: 950
            y: 406
            width: 200
            height: 200
            anchors.right: parent.right
            anchors.rightMargin: 130
            smooth: true
        Behavior on value {
        NumberAnimation {
            duration: 500
        }
        }
            Rectangle {
                id: recSocLight
                x: 0
                y: 0
                width: 40
                height: 40
                color: "#161616"
                radius: 0
                anchors.bottom: parent.bottom
                anchors.bottomMargin: 15
                StatusIndicator {
                    id: statusIndicator
            x: 0
            width: 40
            height: 40
            active: false
            //anchors.right: recSoc.left
            //anchors.top: socGauge.bottom
            color: "#000000"
        }
                anchors.horizontalCenter: parent.horizontalCenter
                border.width: 0
                anchors.leftMargin: 3
                border.color: "#ffffff"
            }
        }

        CircularGauge {
            id: speedometer
            x: 0
            y: 100
            width: 500
            height: 500
            value: 0
            anchors.horizontalCenter: parent.horizontalCenter
            maximumValue: 200
            style: DashboardGaugeStyle {
/*
        Text {
            id: speedText
            font.pixelSize: toPixels(0.3)
            text: kphInt
            color: speedometer.value >= 110 ? "red" : "white"
            horizontalAlignment: Text.AlignRight
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.top: parent.verticalCenter
            anchors.topMargin: toPixels(0.1)
            readonly property int kphInt: control.value
        }
*/
            }
            smooth: true
        Behavior on value {
        NumberAnimation {
            duration: 500
        }
        }
            TurnIndicator {
                id: leftIndicator
                x: 100
                width: 70
                height: 70
                anchors.left: parent.left
                flashing: false
                on: false
                anchors.leftMargin: 0
                direction: Qt.LeftArrow
                anchors.top: parent.top
                anchors.topMargin: 0
            }
            Rectangle {
                id: rectGear
                x: -9
                y: -8
                width: 40
                height: 40
                color: "#000000"
                anchors.horizontalCenter: parent.horizontalCenter
                //anchors.left: statusIndicator00.right
                border.width: 1
                Text {
                    id: txtGear
                    width: 40
                    height: 40
                    color: "#ffffff"
                    text: "N"
                    lineHeight: 0.8
                    anchors.centerIn: parent
                    horizontalAlignment: Text.AlignHCenter
                    verticalAlignment: Text.AlignVCenter
                    font.pixelSize: 25
                }
                anchors.bottomMargin: 15
                anchors.leftMargin: 3
                border.color: "#ffffff"
                anchors.bottom: parent.bottom
            }
            TurnIndicator {
                id: rightIndicator
                x: 80
                width: height
                height: 70
                flashing: /*isAnimating ? true:*/ false
                //on: isAnimating ? true:false
                on: false
                anchors.right: parent.right
                anchors.rightMargin: 0
                direction: Qt.RightArrow
                anchors.top: parent.top
                anchors.topMargin: 0
            }
        }

        Image {
            id: imageEvacuation
            width: 100
            height: 100
            anchors.left: parent.left
            anchors.leftMargin: 200
            visible: true
            anchors.topMargin: 100
            fillMode: Image.PreserveAspectFit
            anchors.top: parent.top
            source: "" // ../images/1-white/白HMI-ICON-24.png
        }

        Rectangle {
            id: recSoc
            x: 6509
            y: -6
            width: 80
            height: 30
            color: "#000000"
            radius: 10
            anchors.topMargin: 5
            Text {
                id: txtMilageLeft
                x: 0
                width: 80
                height: 30
                color: "#ffffff"
                text: "0000"
                anchors.topMargin: 0
                horizontalAlignment: Text.AlignHCenter
                font.pointSize: 20
                anchors.top: parent.top
                verticalAlignment: Text.AlignVCenter
            }
            anchors.horizontalCenter: socGauge.horizontalCenter
            anchors.leftMargin: 3
            border.width: 1
            border.color: "#000000"
            anchors.top: socGauge.bottom
            //anchors.left: statusIndicator00.right
        }

        Text {
            id: txtMilageLeftCap
            y: -2
            width: 60
            height: 30
            color: "#ffffff"
            text: "Km"
            anchors.left: recSoc.right
            anchors.leftMargin: 0
            anchors.topMargin: 5
            horizontalAlignment: Text.AlignLeft
            font.pointSize: 20
            anchors.top: socGauge.bottom
            verticalAlignment: Text.AlignVCenter
        }
        MouseArea {
            id: itemMouseArea
            onDoubleClicked: { // FIXME:
                console.log("double clicked");
                // TODO: signal system back light
            }
        }
    }
/*
    MyObject {
       id: myobject
    }
*/
    // c++ -> QML ( https://goo.gl/sHMaKL )
    function updateSystemInfo(n_dbop, cpu, freemem) {
        //console.log("updateSystemInfo+ ", freemem)
        //text1.text = timestamp; // https://goo.gl/UQ4jEV
        // better not do calculation in QML, just display
        dbop.text = n_dbop;
        cpu1.text = cpu;
        fmem1.text = freemem;
        return ""
    }

    function updateModel(speed, rpm, gear, milage) {
        valueSource.kph = speed;
        return ""
    }

    function updateView() {
    }

    function setAnimaiton(is_on) {
        isAnimating = is_on;
        //console.debug("setAnimation +++ " + isAnimating);
    }

    function updateQInfo(payload, qsize) {
    //txtFramePayLoad.text = payload; // FIXME:
    txtSizeQ.text = qsize;
    }

    function updateQBInfo(payload, qsize, bsize) {
    txtFramePayLoad.text = bsize; // FIXME:
    txtSizeQ.text = qsize;
    }

    // byte0
    function update_VCU_HMI_Msg_1(lturn, rturn, hd_light, side_light,
    hazard_light, access_light, evacuation_light, rear_defogger_light) {
    //console.debug(lturn+","+rturn+","+hd_light);
    leftIndicator.on = ( lturn !== 0 ) ? true:false;
    leftIndicator.flashing = ( lturn !== 1 ) ? true:false;

    rightIndicator.on = ( rturn !== 0 ) ? true:false;
    rightIndicator.flashing = ( rturn != 0 ) ? true:false;

    imageHeadLights.source = ( hd_light != 0 )
        ? "../images/0-color/HMI-ICON-03.png"
        : "../images/1-white/白HMI-ICON-03.png";
    imageSideLights.source = ( side_light != 0 )
        ? "../images/0-color/HMI-ICON-04.png"
        : "../images/1-white/HMI-ICON-04.png";
    imageHazardLight.source = ( hazard_light != 0 )
        ? "../images/0-color/HMI-ICON-07.png"
        : "../images/1-white/白HMI-ICON-07.png";
    imageAccessLight.source = ( access_light != 0 )
        ? "../images/0-color/HMI-ICON-19.png"
        : "../images/1-white/白HMI-ICON-19.png";
    imageEvacuation.source = ( evacuation_light != 0 )
        ? "../images/1-white/白HMI-ICON-24.png"
        : "";
    imageRearDefogger.source = ( rear_defogger_light != 0 )
        ? "../images/0-color/HMI-ICON-06.png"
        : "../images/1-white/HMI-ICON-06.png";
    }

    function update_VCU_HMI_Msg_1_Byte_1(ecas_kneeling, rear_fog_light, alarm_getoff,
    motor_overrun, regen_brake, parking, motor_op) {
    //console.debug(ecas_kneeling+","+rear_fog_light+","+alarm_getoff+","+motor_overrun+","+regen_brake+","+parking+","+motor_op);
    imageEcasKneeling.source = ( ecas_kneeling != 0 )
        ? "../images/0-color/HMI-ICON-11.png"
        : "../images/1-white/白HMI-ICON-11.png";
    imageRearFogLight.source = ( rear_fog_light != 0 )
    ? "../images/0-color/HMI-ICON-05.png"
    : "../images/1-white/白HMI-ICON-05.png";
    imageAlarmGetOff.source = ( alarm_getoff != 0 )
        ? "../images/0-color/HMI-ICON-29.png"
        : "../images/1-white/白HMI-ICON-29.png";
    imageRegenBrake.source = ( regen_brake != 0 )
        ? "../images/0-color/HMI-ICON-08.png"
        : "../images/1-white/白HMI-ICON-08.png";
    imageParking.source = ( parking != 0 )
        ? "../images/0-color/HMI-ICON-09.png"
        : "../images/1-white/白HMI-ICON-09.png";
    imageMotor.source = ( motor_overrun != 0 )
        ? "../images/0-color/HMI-ICON-21.png"
        : ( motor_op != 0 )
        ? "../images/0-color/HMI-ICON-20.png"
        : "";
        // TODO: there is a warning icon, yellow, 63.
    }

    function update_VCU_HMI_Msg_1_Byte_2(
    abs,ecas_warn,lining,emergency_exit) {
    //console.debug(abs+","+ecas_warn+","+lining+","+emergency_exit);
    imageAbs.source = ( abs == 2 )
        ? "../images/0-color/HMI-ICON-14.png"
        : ( abs == 1 )
        ? "../images/0-color/20190308HMI-ICON-79.png"
        : "../images/1-white/白HMI-ICON-14.png";
    imageEcas.source = ( ecas_warn == 2 )
        ? "../images/0-color/HMI-ICON-13.png"
        : ( ecas_warn == 1 )
        ? "../images/0-color/HMI-ICON-12.png"
        : "../images/1-white/白HMI-ICON-13.png";
    imageLining.source = ( lining == 1 )
        ? "../images/0-color/20190308HMI-ICON-80.png"
        : "../images/1-white/白HMI-ICON-10.png";
    imageEvacuation.source = ( emergency_exit == 1 )
        ? "../images/0-color/HMI-ICON-24.png"
        : "";
    }

    function update_VCU_HMI_Msg_1_Byte_3(motor_alarm,air_alarm,psteering_alarm,mpower_alarm) {
    imageMotor.source = ( motor_alarm == 2 )
        ? "../images/0-color/HMI-ICON-21.png"
        : ( motor_alarm == 1 )
        ? "../images/0-color/HMI-ICON-63.png"
        : "../images/1-white/白HMI-ICON-20.png";
    imageAir.source = ( air_alarm == 2 )
        ? "../images/0-color/HMI-ICON-35.png"
        : ( air_alarm == 1 )
        ? "../images/0-color/HMI-ICON-36.png"
        : "../images/0-color/HMI-ICON-34.png";
    imagePSteering.source = ( psteering_alarm == 2 )
        ? "../images/0-color/HMI-ICON-15.png"
        : ( psteering_alarm == 1 )
        ? "../images/0-color/HMI-ICON-62.png"
        : "../images/1-white/白HMI-ICON-15.png";
    imageMainPower.source = ( mpower_alarm == 2 )
        ? "../images/0-color/HMI-ICON-61.png"
        : ( mpower_alarm == 1 )
        ? "../images/0-color/HMI-ICON-16.png"
        : "../images/1-white/白HMI-ICON-16.png";
    }

    function update_VCU_HMI_Msg_1_Byte_4(v24_alarm,lv_alarm,
    charge_abort,brake,wiper,lb_light) {
    imageV24.source = ( v24_alarm == 2 )
        ? "../images/0-color/HMI-ICON-18.png"
        : ( v24_alarm == 1 )
        ? "../images/0-color/HMI-ICON-64.png"
        : "../images/1-white/白HMI-ICON-17.png";
    // TODO: the rest
    }

    function update_VCU_HMI_Msg_1_Byte_5(gear) {
    switch ( gear ) {
        case 0 : txtGear.text = "N"; break;
        case 1 : txtGear.text = "1"; break;
        case 2 : txtGear.text = "2"; break;
        case 3 : txtGear.text = "3"; break;
        case 4 : txtGear.text = "4"; break;
        case 5 : txtGear.text = "5"; break;
        case 6 : txtGear.text = "6"; break;
        case 7 : txtGear.text = "R"; break;
        default: txtGear.text = "";
    }
    }

    function update_VCU_HMI_Msg_1_Byte_6(speed) {
    speedometer.value = speed;
    // TODO: animation
    // text color not customized so far
    /*
    if ( 120 <= speedometer.value )
        speedText.color = "red";
    else
        speedText.color = "#e5e5e5";
    */
    }

    function update_VCU_HMI_Msg_2_Byte_0_5(air_pressure,motor_temp,
    otank_temp2,v24) {
    //console.debug(air_pressure+","+motor_temp+","+otank_temp2+","+v24);
    txtAirReading.text
        = parseFloat(Math.round(air_pressure*10)/10).toFixed(1);
    txtMotorIoTempReading.text = motor_temp;
    txtOTankTemp.text = otank_temp2;
    txtV24.text = parseFloat(Math.round(v24*10)/10).toFixed(1);
    // TODO: text color not customized so far
    }

    function update_VCU_HMI_Msg_2_Byte_6(air_unlock,
    passenger_unlock,emergency_unlock,wproff_unlock,
    ecas_unlock, isolation_abnormal_unlock,
    v24_carlock_unlock) {
    //console.debug(air_unlock+","+passenger_unlock+","+emergency_unlock+","+wproff_unlock+","+ecas_unlock+","+isolation_abnormal_unlock+","+v24_carlock_unlock);
    // TODO:
    }

    function update_VCU_HMI_Msg_3(total, trip) {
    if ( tbTrip.checked ) {
        txtMilage.text = trip;
    }
    else {
        txtMilage.text = total;
    }
    current_total = total;
    current_trip = trip;
    //console.debug("total "+current_total+
    //    " trip "+current_trip+" status "+tbTrip.checked);
    }

    function update_VCU_HMI_Msg_4(delta, perkm, left) {
    txtMilageLeft.text = left;
    powerGauge.value = delta;
    // TODO: perkm
    //console.debug("delta "+delta+
    //    " perkm "+perkm+" left "+left);
    }

    function updateBMS_VCU_Msg01(s_voltage,s_current,soc,b_status,
    f_level,mcntctr_nc,mcntctr_st,pcell_alrm,s_cremains) {
    socGauge.value = soc;
    statusIndicator.color =
        ( soc <= 19 ) ?
        "red" : ( 20 <= soc && soc <= 29 ) ?
        "yellow" : "cyan";
    statusIndicator.active = true;
    /*console.debug("v "+s_voltage+" a "+s_current+" soc "+soc
        +" b "+b_status+" fl "+f_level+" mctn "+mcntctr_nc
        +" mcts "+mcntctr_st+" pcal "+pcell_alrm
        +" crmn "+s_cremains);*/

    if ( b_status === 0 ) {
        imageBatteryStatus.source = "../images/0-color/HMI-ICON-25.png";
    } else if ( b_status === 1 ) {
        imageBatteryStatus.source = "../images/0-color/HMI-ICON-26.png";
    } else if ( b_status === 2 ) {
        imageBatteryStatus.source = "../images/0-color/HMI-ICON-27.png";
    } else if ( b_status === 3 ) {
        imageBatteryStatus.source = "../images/0-color/HMI-ICON-28.png";
    } else { }
    }

    function updateBMS_VCU_Msg02(s_cmaxv,cell_maxi,s_cminv,cell_mini,
    s_cdiffv) {
    //console.debug(hmiroot.objectName+" ubcm2");
    }

    // Dashboards are typically in a landscape orientation, so we need to ensure
    // our height is never greater than our width.

    ToggleButton {
        id: tbTrip
        x: 746
        y: 620
        width: 50
        height: 50
        text: qsTr("T")
        transformOrigin: Item.Center
        z: 1
        onClicked: {
        //console.debug("total "+current_total+
        //	" trip "+current_trip+" status "+tbTrip.checked);
        if ( tbTrip.checked ) {
        txtMilage.text = current_trip;
        }
        else {
        txtMilage.text = current_total;
        }
        }
    }

    Image {
        id: imageBattery
        x: -9
        y: -8
        width: 100
        height: 100
        anchors.top: parent.top
        anchors.topMargin: 0
        anchors.rightMargin: 0
        source: "../images/0-color/HMI-ICON-51.png"
        fillMode: Image.PreserveAspectFit
        anchors.right: parent.right
        // How can I create a new window from within QML?
        // ( https://goo.gl/ivPZh7 )
    MouseArea {
        id: mouseArea
        z: 2
        anchors.fill: parent
        onClicked: {
        //TODO:check singleton
        //var component
        //   = Qt.createComponent("BatteryDeployment.qml");
        //win = component.createObject(hmiroot);
        //win.show();
        // Connecting to QML Signals ( https://goo.gl/gFZphL )
        hmiroot.qmlSignal("Battery");
        }
    }
    }
    onActiveChanged : {
    //console.log("Activated "+this.id); // FIXME:
    if ( true === hmiroot.active ) {
        hmiroot.qmlSignalActive("Main");
    }
    }
    Component.onCompleted: {
    console.debug("completed");
    }
}

